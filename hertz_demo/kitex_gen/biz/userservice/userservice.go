// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	biz "hertz_demo/kitex_gen/biz"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*biz.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Login":    kitex.NewMethodInfo(loginHandler, newUserServiceLoginArgs, newUserServiceLoginResult, false),
		"LogOut":   kitex.NewMethodInfo(logOutHandler, newUserServiceLogOutArgs, newUserServiceLogOutResult, false),
		"GetUsers": kitex.NewMethodInfo(getUsersHandler, newUserServiceGetUsersArgs, newUserServiceGetUsersResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "biz",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biz.UserServiceLoginArgs)
	realResult := result.(*biz.UserServiceLoginResult)
	success, err := handler.(biz.UserService).Login(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLoginArgs() interface{} {
	return biz.NewUserServiceLoginArgs()
}

func newUserServiceLoginResult() interface{} {
	return biz.NewUserServiceLoginResult()
}

func logOutHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biz.UserServiceLogOutArgs)
	realResult := result.(*biz.UserServiceLogOutResult)
	success, err := handler.(biz.UserService).LogOut(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLogOutArgs() interface{} {
	return biz.NewUserServiceLogOutArgs()
}

func newUserServiceLogOutResult() interface{} {
	return biz.NewUserServiceLogOutResult()
}

func getUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*biz.UserServiceGetUsersResult)
	success, err := handler.(biz.UserService).GetUsers(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetUsersArgs() interface{} {
	return biz.NewUserServiceGetUsersArgs()
}

func newUserServiceGetUsersResult() interface{} {
	return biz.NewUserServiceGetUsersResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Login(ctx context.Context, request *biz.LoginRequest) (r *biz.LoginResponse, err error) {
	var _args biz.UserServiceLoginArgs
	_args.Request = request
	var _result biz.UserServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LogOut(ctx context.Context, request *biz.LogoutRequest) (r *biz.LogOutResponse, err error) {
	var _args biz.UserServiceLogOutArgs
	_args.Request = request
	var _result biz.UserServiceLogOutResult
	if err = p.c.Call(ctx, "LogOut", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUsers(ctx context.Context) (r []*biz.User, err error) {
	var _args biz.UserServiceGetUsersArgs
	var _result biz.UserServiceGetUsersResult
	if err = p.c.Call(ctx, "GetUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
